.data
	pulaLinha: .asciiz "\n"
	menos: .asciiz "-"
	mais: .asciiz "+"
	zero: .float 0.0
	Ox: .asciiz "0x"
	mantissa: .space 6
	hexSinal: .word 0x80000000 
	hexExpo: .word 0x7F800000 
	hexMantissa: .word 0x007FFFFF
.text

main:
	jal lerFloat
	jal imprimeFloat
	jal imprimeSinal
	jal calcExpoente
	jal calcMantissa
	j exit
	
lerFloat:
#Leitura do Float
	li $v0, 6
	syscall
	mfc1 $t0, $f0
	jr $ra
	
imprimeFloat:
#Impress√£o do Float
	li $v0, 2
	mtc1 $t0, $f12
	syscall
	j _pulaLinha
	jr $ra
	
_pulaLinha:
	#Pula uma linha na console
	li $v0, 4
	la $a0, pulaLinha
	syscall
	jr $ra

imprimeSinal:
	# Imprime o sinal baseado no bit 31
	lw $t1, hexSinal
	and $t1, $t0, $t1
	srl $t1, $t1, 31
	c.lt.s $f0, $f2
	beq $t1, 1,  negativo
	beq $t1, 0,  positivo

	
negativo:
	#Imprime sinal negativo
	li $v0, 4
	la $a0, menos
	syscall
	
	j _pulaLinha
	
positivo:
	#Imprime sinal positivo
	li $v0, 4
	la $a0, mais
	syscall
	j _pulaLinha	
	
calcExpoente:
	#Calcula expoente baseado nos bits 31 a 23 - 127
	lw $t2, hexExpo
	and $t2, $t0, $t2
	srl $t2, $t2, 23
	addi $t2, $t2, -127
	j imprimeExp

imprimeExp:
	# Imprime o expoente calculado
	li $v0, 1
	la $a0, 0($t2)
	syscall
	
	j _pulaLinha
	
calcMantissa:
	# Calcula a mantissa baseada nos bits 22 a 0
	lw $t3, hexMantissa
	and $t3, $t0, $t3
	la $t8, ($t3)
	j convertMantissa 

convertMantissa:
	la $t4, mantissa
	li $t5, 8
	j LOOP_mantissa

LOOP_mantissa:
	beqz $t5, imprimeMantissa
	rol $t3, $t3, 4
	andi $t6, $t3, 0xF
	ble $t6, 9, Num
	addi $t6, $t6, 55 # ASCII de letra


	b saveDigit

Num:
	addi $t6, $t6, 48 # ASCII de num

saveDigit:
	sb $t6, 0($t4)		
	addi $t4, $t4, 1	
	addi $t5, $t5, -1	

	j LOOP_mantissa
	
imprimeMantissa:
	#Imprime Mantissa calculada
	li $v0, 4
	la $a0, Ox
	syscall	

	li $v0, 4	
	la $a0, mantissa
	syscall
	
	j _pulaLinha


exit:	
	
	li $v0, 10
	syscall